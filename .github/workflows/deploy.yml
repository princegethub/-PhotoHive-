name: CI/CD for Backend and Frontend

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      REGISTRY: docker.io
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      BACKEND_IMAGE: princegethub/instagram-backend:latest
      FRONTEND_IMAGE: princegethub/instagram-frontend:latest

    steps:
      - name: Check required secrets
        run: |
          if [ -z "${{ secrets.DOCKERHUB_USERNAME }}" ] || \
             [ -z "${{ secrets.DOCKERHUB_TOKEN }}" ] || \
             [ -z "${{ secrets.SERVER_HOST }}" ] || \
             [ -z "${{ secrets.SERVER_USER }}" ] || \
             [ -z "${{ secrets.SERVER_SSH_KEY }}" ] || \
             [ -z "${{ secrets.SERVER_PORT }}" ]; then
            echo "‚ùå Missing required secrets. Exiting..."
            exit 1
          else
            echo "‚úÖ All required secrets are present. Continuing..."
          fi

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.BACKEND_IMAGE }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./forntend
          file: ./forntend/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy via SSH and Docker Compose
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e
            echo "üîç Debug: Connected to server successfully"
            cd /home/ubuntu/instagram-clone || exit 1
            echo "üì¶ Pulling latest Docker images..."
            docker-compose pull
            echo "üöÄ Starting services..."
            docker-compose up -d --remove-orphans
            echo "‚úÖ Deployment completed"
